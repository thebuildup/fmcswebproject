# Generated by Django 4.2.2 on 2023-07-21 19:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_matches', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=1, help_text='The number of matches played between the players (1 to 5).')),
                ('player1_goals', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the first player.', null=True)),
                ('player2_goals', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the second player.', null=True)),
                ('player1_initial_rating', models.FloatField(default=1500.0, help_text='The initial rating of player1 before the match.')),
                ('player2_initial_rating', models.FloatField(default=1500.0, help_text='The initial rating of player2 before the match.')),
                ('date_played', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time when the game was played.')),
                ('confirmed', models.ForeignKey(default=False, help_text='The user which submitted the game.', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The player's name.", max_length=200, unique=True)),
                ('user', models.OneToOneField(blank=True, help_text='The user associated with the player.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='RatingPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(help_text='The starting datetime for the rating period.')),
                ('end_datetime', models.DateTimeField(help_text='The starting datetime for the rating period.')),
            ],
            options={
                'ordering': ['-end_datetime'],
            },
        ),
        migrations.CreateModel(
            name='PlayerStatsNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games', models.PositiveIntegerField(help_text='The number of games a player has played.')),
                ('wins', models.PositiveIntegerField(help_text='The number of wins the player has.')),
                ('draws', models.PositiveIntegerField(help_text='The number of draws the player has.')),
                ('losses', models.PositiveIntegerField(help_text='The number of losses the player has.')),
                ('win_rate', models.FloatField(help_text="The player's win rate.")),
                ('average_goals_per_game', models.FloatField(help_text='The average number of goals scored per game by the player.')),
                ('average_goals_against_per_game', models.FloatField(help_text='The average number of goals scored against the player per game.')),
                ('game', models.ForeignKey(help_text="The game which updated the player's stats.", on_delete=django.db.models.deletion.CASCADE, to='glicko.match')),
                ('player', models.ForeignKey(help_text='The player to record stats for.', on_delete=django.db.models.deletion.CASCADE, to='glicko.player')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PlayerRatingNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.PositiveSmallIntegerField(help_text="The player's rating for this rating period.", null=True)),
                ('ranking_delta', models.SmallIntegerField(help_text="The player's rating change for this rating period.", null=True)),
                ('rating', models.FloatField(help_text="The player's rating for this rating period.")),
                ('rating_deviation', models.FloatField(help_text="The player's rating deviation for this rating period.")),
                ('rating_volatility', models.FloatField(help_text="The player's rating volatility for this rating period. This is only used if the rating algorithm is Glicko-2.", null=True)),
                ('inactivity', models.PositiveSmallIntegerField(help_text='How many rating periods the player has been inactive for.')),
                ('is_active', models.BooleanField(help_text='Whether the player was considered active during this rating period.')),
                ('player', models.ForeignKey(help_text='The player corresponding whose ratings this node is for.', on_delete=django.db.models.deletion.CASCADE, to='glicko.player')),
                ('rating_period', models.ForeignKey(help_text='The rating period this rating was calculated in.', on_delete=django.db.models.deletion.CASCADE, to='glicko.ratingperiod')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='match',
            name='player1',
            field=models.ForeignKey(help_text='The first player in the match.', on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_player1', to='glicko.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='player2',
            field=models.ForeignKey(help_text='The second player in the match.', on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_player2', to='glicko.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='rating_period',
            field=models.ForeignKey(blank=True, help_text='The rating period this game is apart of', null=True, on_delete=django.db.models.deletion.SET_NULL, to='glicko.ratingperiod'),
        ),
        migrations.CreateModel(
            name='MatchupStatsNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games_played', models.PositiveIntegerField(default=0, help_text='The number of games played between the players in this matchup.')),
                ('player1_wins', models.PositiveIntegerField(default=0, help_text='The number of games won by the first player in this matchup.')),
                ('player2_wins', models.PositiveIntegerField(default=0, help_text='The number of games won by the second player in this matchup.')),
                ('draws', models.PositiveIntegerField(default=0, help_text='The number of draws in this matchup.')),
                ('losses', models.PositiveIntegerField(default=0, help_text='The number of games lost by both players in this matchup.')),
                ('average_goals_per_game_player1', models.FloatField(default=0.0, help_text='The average number of goals scored by the first player in this matchup.')),
                ('average_goals_per_game_player2', models.FloatField(default=0.0, help_text='The average number of goals scored by the second player in this matchup.')),
                ('win_percentage_player1', models.FloatField(default=0.0, help_text='The percentage of wins for the first player in this matchup.')),
                ('win_percentage_player2', models.FloatField(default=0.0, help_text='The percentage of wins for the second player in this matchup.')),
                ('draw_percentage', models.FloatField(default=0.0, help_text='The percentage of draws in this matchup.')),
                ('loss_percentage_player1', models.FloatField(default=0.0, help_text='The percentage of losses for the first player in this matchup.')),
                ('loss_percentage_player2', models.FloatField(default=0.0, help_text='The percentage of losses for the second player in this matchup.')),
                ('player1', models.ForeignKey(help_text='The first player in the matchup.', on_delete=django.db.models.deletion.CASCADE, related_name='matchups_as_player1', to='glicko.player')),
                ('player2', models.ForeignKey(help_text='The second player in the matchup.', on_delete=django.db.models.deletion.CASCADE, related_name='matchups_as_player2', to='glicko.player')),
            ],
            options={
                'unique_together': {('player1', 'player2')},
            },
        ),
    ]
