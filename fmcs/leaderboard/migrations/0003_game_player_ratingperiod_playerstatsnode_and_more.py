# Generated by Django 4.2.2 on 2023-07-11 09:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        (
            "leaderboard",
            "0002_event_organizator_status_alter_team_ranking_result_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "winner_score",
                    models.PositiveSmallIntegerField(
                        default=8, help_text="The winner's score."
                    ),
                ),
                (
                    "loser_score",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="The loser's score."
                    ),
                ),
                (
                    "datetime_played",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when the game was played.",
                    ),
                ),
            ],
            options={
                "ordering": ["-datetime_played"],
            },
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The player's name.", max_length=200, unique=True
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        help_text="The user associated with the player.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="RatingPeriod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_datetime",
                    models.DateTimeField(
                        help_text="The starting datetime for the rating period."
                    ),
                ),
                (
                    "end_datetime",
                    models.DateTimeField(
                        help_text="The starting datetime for the rating period."
                    ),
                ),
            ],
            options={
                "ordering": ["-end_datetime"],
            },
        ),
        migrations.CreateModel(
            name="PlayerStatsNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "games",
                    models.PositiveIntegerField(
                        help_text="The number of games a player has played."
                    ),
                ),
                (
                    "wins",
                    models.PositiveIntegerField(
                        help_text="The number of wins the player has."
                    ),
                ),
                (
                    "losses",
                    models.PositiveIntegerField(
                        help_text="The number of losses the player has."
                    ),
                ),
                ("win_rate", models.FloatField(help_text="The player's win rate.")),
                (
                    "average_goals_per_game",
                    models.FloatField(
                        help_text="The average number of goals scored per game by the player."
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        help_text="The game which updated the player's stats.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="leaderboard.game",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        help_text="The player to record stats for.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="leaderboard.player",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="PlayerRatingNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ranking",
                    models.PositiveSmallIntegerField(
                        help_text="The player's rating for this rating period.",
                        null=True,
                    ),
                ),
                (
                    "ranking_delta",
                    models.SmallIntegerField(
                        help_text="The player's rating change for this rating period.",
                        null=True,
                    ),
                ),
                (
                    "rating",
                    models.FloatField(
                        help_text="The player's rating for this rating period."
                    ),
                ),
                (
                    "rating_deviation",
                    models.FloatField(
                        help_text="The player's rating deviation for this rating period."
                    ),
                ),
                (
                    "rating_volatility",
                    models.FloatField(
                        help_text="The player's rating volatility for this rating period."
                    ),
                ),
                (
                    "inactivity",
                    models.PositiveSmallIntegerField(
                        help_text="How many rating periods the player has been inactive for."
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        help_text="Whether the player was considered active during this rating period."
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        help_text="The player corresponding whose ratings this node is for.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="leaderboard.player",
                    ),
                ),
                (
                    "rating_period",
                    models.ForeignKey(
                        help_text="The rating period this rating was calculated in.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="leaderboard.ratingperiod",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="MatchupStatsNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "games",
                    models.PositiveIntegerField(
                        help_text="The number of games played by the matchup."
                    ),
                ),
                (
                    "wins",
                    models.PositiveIntegerField(
                        help_text="The number of wins the player1 has."
                    ),
                ),
                (
                    "losses",
                    models.PositiveIntegerField(
                        help_text="The number of losses the player1 has."
                    ),
                ),
                (
                    "win_rate",
                    models.FloatField(help_text="player1's win rate against player2."),
                ),
                (
                    "average_goals_per_game",
                    models.FloatField(
                        help_text="The average number of goals scored per game by player1."
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        help_text="The game which updated the matchup's stats.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="leaderboard.game",
                    ),
                ),
                (
                    "player1",
                    models.ForeignKey(
                        help_text="The player in the matchup whose perspective to take.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player1",
                        to="leaderboard.player",
                    ),
                ),
                (
                    "player2",
                    models.ForeignKey(
                        help_text='The "opponent" player in the matchup.',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player2",
                        to="leaderboard.player",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.AddField(
            model_name="game",
            name="loser",
            field=models.ForeignKey(
                help_text="The game's loser.",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="loser",
                to="leaderboard.player",
            ),
        ),
        migrations.AddField(
            model_name="game",
            name="rating_period",
            field=models.ForeignKey(
                blank=True,
                help_text="The rating period this game is apart of",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="leaderboard.ratingperiod",
            ),
        ),
        migrations.AddField(
            model_name="game",
            name="submitted_by",
            field=models.ForeignKey(
                help_text="The user which submitted the game.",
                on_delete=django.db.models.deletion.PROTECT,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="game",
            name="winner",
            field=models.ForeignKey(
                help_text="The game's winner.",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="winner",
                to="leaderboard.player",
            ),
        ),
    ]
