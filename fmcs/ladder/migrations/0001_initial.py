# Generated by Django 4.2.2 on 2024-01-09 17:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import django_resized.forms
import ladder.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Matches',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_matches', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=1, help_text='The number of matches played between the players (1 to 5).')),
                ('player1_goals_m1', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the first player in first match.', null=True)),
                ('player2_goals_m1', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the second player in first match.', null=True)),
                ('player1_goals_m2', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the first player in second match.', null=True)),
                ('player2_goals_m2', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the second player in second match.', null=True)),
                ('player1_goals_m3', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the first player in third match.', null=True)),
                ('player2_goals_m3', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the second player in third match.', null=True)),
                ('player1_goals_m4', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the first player in fourth match.', null=True)),
                ('player2_goals_m4', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the second player in fourth match.', null=True)),
                ('player1_goals_m5', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the first player in fifth match.', null=True)),
                ('player2_goals_m5', models.PositiveSmallIntegerField(blank=True, help_text='The number of goals scored by the second player in fifth match.', null=True)),
                ('date_played', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time when the game was played.')),
                ('confirmed', models.ForeignKey(default=False, help_text='The user which submitted the game.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_played'],
            },
        ),
        migrations.CreateModel(
            name='Players',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The player's name.", max_length=200, unique=True, validators=[ladder.models.validate_english_name])),
                ('country', django_countries.fields.CountryField(blank=True, default=None, max_length=2, null=True)),
                ('formatted_name', models.SlugField(blank=True, default='', unique=True)),
                ('logo', django_resized.forms.ResizedImageField(blank=True, crop=None, default='media/team_logos/logo_fmcs.png', force_format=None, keep_meta=True, quality=-1, scale=None, size=[1920, 1080], upload_to='media/team_logos/')),
                ('user', models.OneToOneField(blank=True, help_text='The user associated with the player.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='RatingPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(help_text='The starting datetime for the rating period.')),
                ('end_datetime', models.DateTimeField(help_text='The starting datetime for the rating period.')),
            ],
            options={
                'ordering': ['-end_datetime'],
            },
        ),
        migrations.CreateModel(
            name='PlayerStatsNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games', models.PositiveIntegerField(help_text='The number of games a player has played.')),
                ('wins', models.PositiveIntegerField(help_text='The number of wins the player has.')),
                ('draws', models.PositiveIntegerField(help_text='The number of draws the player has.')),
                ('losses', models.PositiveIntegerField(help_text='The number of losses the player has.')),
                ('win_rate', models.FloatField(help_text="The player's win rate.", null=True)),
                ('average_goals_per_game', models.FloatField(help_text='The average number of goals scored per game by the player.')),
                ('average_goals_against_per_game', models.FloatField(help_text='The average number of goals scored against the player per game.')),
                ('game', models.ForeignKey(help_text="The game which updated the player's stats.", on_delete=django.db.models.deletion.CASCADE, to='ladder.matches')),
                ('player', models.ForeignKey(help_text='The player to record stats for.', on_delete=django.db.models.deletion.CASCADE, to='ladder.players')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PlayerRatingNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.PositiveSmallIntegerField(help_text="The player's rating for this rating period.", null=True)),
                ('ranking_delta', models.SmallIntegerField(help_text="The player's rating change for this rating period.", null=True)),
                ('rating', models.FloatField(help_text="The player's rating for this rating period.")),
                ('rating_deviation', models.FloatField(help_text="The player's rating deviation for this rating period.")),
                ('rating_volatility', models.FloatField(help_text="The player's rating volatility for this rating period. This is only used if the rating algorithm is Glicko-2.", null=True)),
                ('inactivity', models.PositiveSmallIntegerField(help_text='How many rating periods the player has been inactive for.')),
                ('is_active', models.BooleanField(help_text='Whether the player was considered active during this rating period.')),
                ('player', models.ForeignKey(help_text='The player corresponding whose ratings this node is for.', on_delete=django.db.models.deletion.CASCADE, to='ladder.players')),
                ('rating_period', models.ForeignKey(help_text='The rating period this rating was calculated in.', on_delete=django.db.models.deletion.CASCADE, to='ladder.ratingperiod')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='MatchupStatsNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games', models.PositiveIntegerField(help_text='The number of games played by the matchup.')),
                ('wins', models.PositiveIntegerField(help_text='The number of wins the player1 has.')),
                ('draws', models.PositiveIntegerField(help_text='The number of draws the player1 has.')),
                ('losses', models.PositiveIntegerField(help_text='The number of losses the player1 has.')),
                ('win_rate', models.FloatField(help_text="player1's win rate against player2.")),
                ('average_goals_per_game', models.FloatField(help_text='The average number of goals scored per game by player1.')),
                ('average_goals_against_per_game', models.FloatField(help_text='The average number of goals scored per game by player2.')),
                ('game', models.ForeignKey(help_text="The game which updated the matchup's stats.", on_delete=django.db.models.deletion.CASCADE, to='ladder.matches')),
                ('player1', models.ForeignKey(help_text='The player in the matchup whose perspective to take.', on_delete=django.db.models.deletion.CASCADE, related_name='player1', to='ladder.players')),
                ('player2', models.ForeignKey(help_text='The "opponent" player in the matchup.', on_delete=django.db.models.deletion.CASCADE, related_name='player2', to='ladder.players')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='matches',
            name='player1',
            field=models.ForeignKey(help_text='The first player in the match.', on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_player1', to='ladder.players'),
        ),
        migrations.AddField(
            model_name='matches',
            name='player2',
            field=models.ForeignKey(help_text='The second player in the match.', on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_player2', to='ladder.players'),
        ),
        migrations.AddField(
            model_name='matches',
            name='rating_period',
            field=models.ForeignKey(blank=True, help_text='The rating period this game is apart of', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ladder.ratingperiod'),
        ),
    ]
