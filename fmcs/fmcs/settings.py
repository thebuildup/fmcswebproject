"""
Django settings for fmcs project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

from django.contrib.messages import constants as messages
from django.utils.translation import gettext_lazy as gtl

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-9r(=gp%fjo47(($mq3p1%!@t2%j8ye-y!71k5g!#1o%wi!t+eg"
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['fmchamps.vh104.hosterby.com', 'http://127.0.0.1:8000', 'localhost', '127.0.0.1', '0.0.0.0', '']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'import_export',
    "main",
    "leaderboard",
    "users",
    "engine",
    "glicko",
    "team",
    "django_countries",
    "ranking",
    "match",
    'rest_framework',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "fmcs.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "fmcs.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

# To use Neon with Django, you have to create a Project on Neon and specify the project connection settings in your settings.py in the same way as for standalone Postgres.


DATABASES = {
    'default': {
        'ENGINE': os.environ["ENGINE"],
        'NAME': os.environ["NAME"],
        'USER': os.environ["USERDB"],
        'PASSWORD': os.environ["PASSWORD"],
        'HOST': os.environ["HOST"],
        'PORT': os.environ["PORT"],
    }
}
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = "/static/"
STATIC_ROOT = "/home/fmchamps/public_html/fmcs/static"
STATIC_URL = "/fmcs/static/"

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

MEDIA_ROOT = "/home/fmchamps/public_html/fmcs/media"
MEDIA_URL = "/fmcs/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SESSION_SAVE_EVERY_REQUEST = True

LOGIN_REDIRECT_URL = '/'

LOGIN_URL = 'login'

# Rating algorithm settings
RATING_ALGORITHM = os.environ["RATING_ALGORITHM"].lower()

if RATING_ALGORITHM not in {"glicko", "glicko2"}:
    raise ValueError("RATING_ALGORITHM must be 'GLICKO' or 'GLICKO2'")

GLICKO_BASE_RATING = float(os.environ["GLICKO_BASE_RATING"])
GLICKO_BASE_RD = float(os.environ["GLICKO_BASE_RD"])
GLICKO_RATING_PERIOD_DAYS = int(os.environ["GLICKO_RATING_PERIOD_DAYS"])

GLICKO2_BASE_RATING = float(os.environ["GLICKO2_BASE_RATING"])
GLICKO2_BASE_RD = float(os.environ["GLICKO2_BASE_RD"])
GLICKO2_BASE_VOLATILITY = float(os.environ["GLICKO2_BASE_VOLATILITY"])
GLICKO2_SYSTEM_CONSTANT = float(os.environ["GLICKO2_SYSTEM_CONSTANT"])
GLICKO2_RATING_PERIOD_DAYS = int(os.environ["GLICKO2_RATING_PERIOD_DAYS"])

# Other rating settings
NUMBER_OF_RATING_PERIODS_MISSED_TO_BE_INACTIVE = int(
    os.environ["NUMBER_OF_RATING_PERIODS_MISSED_TO_BE_INACTIVE"]
)

COUNTRIES_OVERRIDE = {
    "EN": {
        "name": gtl("England"),
        "alpha3": gtl("ENG"),
    },
    "NI": {
        "name": gtl("Northern Ireland"),
        "alpha3": gtl("NIR"),
    },
    "SC": {
        "name": gtl("Scotland"),
        "alpha3": gtl("SCO"),
    },
    "WL": {
        "name": gtl("Wales"),
        "alpha3": gtl("WAL"),
    },
    "CL": {
        "name": gtl("Chile"),
        "alpha3": gtl("CHI"),
    },
    "DE": {
        "name": gtl("Germany"),
        "alpha3": gtl("GER"),
    },
    "MY": {
        "name": gtl("Malaysia"),
        "alpha3": gtl("MAS"),
    },
    "ZA": {
        "name": gtl("South Africa"),
        "alpha3": gtl("RSA"),
    },
}

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}
